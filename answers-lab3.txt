Question 1
==========

By having a separate entry point for each exception/interrupt we are able to provide a
trap number which allows to identify this exception/interrupt inside `trap()`.

Question 2
==========

`softint` produces General Protection fault, because the interrupt gate for trap 14 has
DPL of 0 and doesn't allow to invoke this vector in user mode. If DPL would be set to
3, the user code would produce Page Fault (vector 14). In current implementation, the
faulting envronment would be deleted in both cases. But if we'll later add more
complicated logic for handling page faults, then software-generated traps would only
confuse the kernel code and thus shouldn't be allowed.

Question 3
==========

In order to get the breakpoint exception to work, we must set the DPL of the corresponding
gate descriptor to 3. Setting DPL to 0 would not allow invoking the interrupt vector 3
from user mode, resulting in a general protection fault.

Question 4
==========

If user mode programs could invoke arbitrary interrupt vectors, they would crash the
system. For example, they could invoke an interrupt handler for the disk driver, while
the data was not ready.

Challenge 1
===========

Changed the macros in `trapentry.S` to automatically generate a table of trap handlers
by switching between the `.text` and `.data` directives.

Challenge 2
===========

Added new commands to the kernel monitor:
* `continue` - continue execution after the breakpoint exception,
* `step` - single-step one instruction at a time.

In order to implement single-stepping, the Trap Flag is set so that the CPU generates a
breakpoint exception after each instruction.

Challenge 3
===========

Implemented system calls using the `sysenter` and `sysexit` instructions.

Added code to initialize the necessary MSRs in `trap_init_percpu()` in `kern/trap.c`.
Implemented a function to invoke "fast" system calls, `syscall_fast()` in `lib/syscall.c`,
and a corresponding kernel handler, `sysenter_handler`, in `kern/trapentry.S`.
